#!/usr/bin/bash

# Init variables
search=''
replace=''
dir=0
insensitive=0
rg_opts_input=''

# ANSI escape sequences for coloring the output
GREEN='\033[0;92m'  # Green color
NC='\033[0m'        # No color
# Double escaped for usage in sed
SED_GREEN='\\033[0;32m'
RED='\\033[0;91m'
SED_NC='\\033[0m'
STRIKE='\\033[9m'    # Strikethrough effect

print_usage() {
    echo " Usage: snr [Options] search_expression replace_expression [./path]"
    echo " If you ommit the search path, ./ is the default"
    echo " Provide options with one hyphen, 'o' must be the last, e.g. -iro"
    echo 
    echo -e "  -r \treads filenames from stdin (instead of searching ./path)" 
    echo -e "  -i \tfor case-insensitive search"
    echo -e "  -o \tfor rg options, eg. snr -po -. search_term replace_with ./ (to search hidden files too)"
    echo 
    echo " Search/Replace using extended regex; use quotes, e.g. snr '(username: ).*' '\1Daniel'"
    exit 0
}

while getopts 'iro:h' flag; do
    case "${flag}" in
        i) insensitive=1 ;;
        r) dir=1 ;;
        h) print_usage ;;
        o) rg_opts_input="${OPTARG}" ;;
        *) print_usage
           exit 1 ;;
    esac
done


# Set $search and $replace based on the provided opts
if [[ "$1" != -* ]]; then
    search="$1"
    replace="$2"
elif [[ "$1" =~ -.*[o] ]]; then
    search="$3"
    replace="$4"
else
    search="$2"
    replace="$3"
fi

# [debug:]
# printf "$search $replace\n"

# If a directory is provided with, use ripgrep (rg) to search for files containing the search term
if [[ "$dir" == 0 ]]; then
    # Set options for rg to perform the search for matching files
    rg_opts="-l $rg_opts_input"
    [[ "$insensitive" == 1 ]] && rg_opts="-i $rg_opts"

    # Set searchpath
    search_path="${!#}"
    # Check if a valid search path was provided otherwise use ./
    if [[ ! -d "$search_path" ]]; then
        search_path="./"
    fi
    # Store the list of file paths matching the search term in the specified directory
    readarray -t paths < <(rg $rg_opts "$search" $search_path)
else
    # Otherwise (-r option), read from stdin and store paths in an array
    readarray -t paths
fi

# Iterate over the array of file paths
for file in "${paths[@]}"; do
    # Convert relative path to absolute path using realpath
    abs_path=$(realpath "$file")

    echo "---------------------------------------------------------------------------------------------------"
    printf "${GREEN}$abs_path${NC}:\n"
    
    # sed command to perform the replacement: Add -I option for case-insensitive if needed
    sed_opts="gp"
    [[ "$insensitive" == 1 ]] && sed_opts="I $sed_opts"

    # Use echo -e to have colors; awk for line numbers; simulated replacement with sed
    echo -e "$(awk '{print NR ": " $0}' $file | sed -rn "s/$search/$RED$STRIKE&$SED_NC $SED_GREEN$replace$SED_NC/$sed_opts")"
    
    echo "---------------------------------------------------------------------------------------------------"
    
    # Prompt the user for input on whether to replace all occurrences in the file
    echo -n "Replace all in $file? y(es), n(o): " 
    read -n 1 input </dev/tty

    if [[ "$input" =~ ^[yY] ]]; then
        # Pattern Substitution to remove the p option
        sed_opts="${sed_opts//p/}"

        # Perform the Substitution in place
        sed -ri "s/$search/$replace/$sed_opts" "$file"
    elif [[ "$input" =~ ^[nN] ]]; then
        # If the user selects no, skip to the next file
        printf "\n\n"
        continue
    else 
        # If the input is invalid, ask the user again
        echo 
        printf "Invalid input! Yy/Nn: \n"
        echo -n "Replace all in $file? y(es), n(o): " 
        read -n 1 input </dev/tty
    fi
    printf "\n\n"
done
